import os
import time
from groq_speech_to_text import groq_recognize_speech, _generate_groq_response# Import the GROQ functions
from voice_assistant.text_to_speech import speak
from datetime import datetime
from online import search_on_google,youtube

def greet_me():
    hour = datetime.now().hour
    if (hour >= 6) and (hour < 12):
        speak("Good Morning Sir")
    elif (hour >= 12) and (hour < 16):
        speak("Good Afternoon Sir")
    elif (hour >= 16) and (hour < 19):
        speak("Good Evening Sir")
    speak("I'm Ghost. How may I assist you?")

# Main loop for listening, recognizing, and responding
if __name__ == "__main__":
    greet_me()  # Initial greeting
    while True:
        # Listen for a command
        query = groq_recognize_speech().lower()  # Get the recognized speech and convert to lowercase

        if query == "":
            continue  # Skip if no valid response

        elif "open notepad" in query:
            speak("Opening Notepad, sir")
            print("Opening Notepad...")
            time.sleep(1)  # Adding a small delay before opening Notepad
            try:
                os.startfile("C:\\Windows\\notepad.exe")
                print("Notepad opened successfully.")
            except Exception as e:
                speak(f"Sorry, I couldn't open Notepad due to: {e}")
                print(f"DEBUG: Error opening Notepad: {e}")

        elif "open command prompt" in query:
            speak("Opening Command Prompt, sir")
            print("Opening Command Prompt...")
            time.sleep(1)  # Adding a small delay before opening Command Prompt
            try:
                os.system('start cmd')  # Open Command Prompt using system command
                print("Command Prompt opened successfully.")
            except Exception as e:
                speak(f"Sorry, I couldn't open Command Prompt due to: {e}")
                print(f"DEBUG: Error opening Command Prompt: {e}")

        elif "open discord" in query:
            speak("Opening Discord, sir")
            print("Attempting to open Discord...")
            time.sleep(1)  # Adding a small delay before opening Discord
            try:
                discord_path = "C:\\Path\\to\\Discord.lnk"  # Update this with the correct path to your Discord shortcut
                os.startfile(discord_path)  # Open Discord via the shortcut
                print("Discord opened successfully.")
            except Exception as e:
                speak(f"Sorry, I couldn't open Discord due to: {e}")
                print(f"DEBUG: Error opening Discord: {e}")
                
        elif "open google" in query:
            speak("What do you want to search on Google, sir?")
            search_query = groq_recognize_speech().lower()  # Get the search query from the user
            search_on_google(search_query)  # Perform the actual search
   
            
        elif "open youtube" in query:
            speak("what do you want to play on youtube sir?") 
            video = groq_recognize_speech().lower()
            youtube(video)      

        elif "stop" in query or "exit" in query:
            speak("Goodbye, sir")
            exit()

        else:
            # Generate a response using the GROQ model
            chat_history = [{"role": "user", "content": query}]
            groq_response = _generate_groq_response(chat_history)  # Call the function to get the response
            
            print(f"Response: {groq_response}")
            speak(groq_response)  # Speak the response generated by GROQ
            
